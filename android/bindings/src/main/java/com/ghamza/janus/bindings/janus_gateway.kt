// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.ghamza.janus.bindings

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import android.os.Build
import androidx.annotation.RequiresApi
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_janus_gateway_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_janus_gateway_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "janus_gateway"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`transaction`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`transaction`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`id`: RustBuffer.ByValue,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod3 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`id`: RustBuffer.ByValue,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod4 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod5 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod6 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`room`: RustBuffer.ByValue,`participantId`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod7 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod8 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`errorCode`: Short,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod9 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`data`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEchotestHandleCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`echotest`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEchotestHandleCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`echotest`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEchotestHandleCallbackMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`errorCode`: Short,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEchotestHandleCallbackMethod3 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEchotestHandleCallbackMethod4 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`data`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceHandleCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceHandleCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("onResult", "onResultWithJsep", "onRoomJoinedWithJsep", "onRoomJoined", "onParticipantsJoined", "onParticipantsUpdated", "onParticipantLeft", "onHandleEvent", "onAudioBridgeError", "onOther", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceAudioBridgeHandleCallback(
    @JvmField internal var `onResult`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod0? = null,
    @JvmField internal var `onResultWithJsep`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod1? = null,
    @JvmField internal var `onRoomJoinedWithJsep`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod2? = null,
    @JvmField internal var `onRoomJoined`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod3? = null,
    @JvmField internal var `onParticipantsJoined`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod4? = null,
    @JvmField internal var `onParticipantsUpdated`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod5? = null,
    @JvmField internal var `onParticipantLeft`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod6? = null,
    @JvmField internal var `onHandleEvent`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod7? = null,
    @JvmField internal var `onAudioBridgeError`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod8? = null,
    @JvmField internal var `onOther`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod9? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onResult`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod0? = null,
        `onResultWithJsep`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod1? = null,
        `onRoomJoinedWithJsep`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod2? = null,
        `onRoomJoined`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod3? = null,
        `onParticipantsJoined`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod4? = null,
        `onParticipantsUpdated`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod5? = null,
        `onParticipantLeft`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod6? = null,
        `onHandleEvent`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod7? = null,
        `onAudioBridgeError`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod8? = null,
        `onOther`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod9? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceAudioBridgeHandleCallback(`onResult`,`onResultWithJsep`,`onRoomJoinedWithJsep`,`onRoomJoined`,`onParticipantsJoined`,`onParticipantsUpdated`,`onParticipantLeft`,`onHandleEvent`,`onAudioBridgeError`,`onOther`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceAudioBridgeHandleCallback) {
        `onResult` = other.`onResult`
        `onResultWithJsep` = other.`onResultWithJsep`
        `onRoomJoinedWithJsep` = other.`onRoomJoinedWithJsep`
        `onRoomJoined` = other.`onRoomJoined`
        `onParticipantsJoined` = other.`onParticipantsJoined`
        `onParticipantsUpdated` = other.`onParticipantsUpdated`
        `onParticipantLeft` = other.`onParticipantLeft`
        `onHandleEvent` = other.`onHandleEvent`
        `onAudioBridgeError` = other.`onAudioBridgeError`
        `onOther` = other.`onOther`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onResult", "onResultWithJsep", "onEchoTestError", "onHandleEvent", "onOther", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceEchotestHandleCallback(
    @JvmField internal var `onResult`: UniffiCallbackInterfaceEchotestHandleCallbackMethod0? = null,
    @JvmField internal var `onResultWithJsep`: UniffiCallbackInterfaceEchotestHandleCallbackMethod1? = null,
    @JvmField internal var `onEchoTestError`: UniffiCallbackInterfaceEchotestHandleCallbackMethod2? = null,
    @JvmField internal var `onHandleEvent`: UniffiCallbackInterfaceEchotestHandleCallbackMethod3? = null,
    @JvmField internal var `onOther`: UniffiCallbackInterfaceEchotestHandleCallbackMethod4? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onResult`: UniffiCallbackInterfaceEchotestHandleCallbackMethod0? = null,
        `onResultWithJsep`: UniffiCallbackInterfaceEchotestHandleCallbackMethod1? = null,
        `onEchoTestError`: UniffiCallbackInterfaceEchotestHandleCallbackMethod2? = null,
        `onHandleEvent`: UniffiCallbackInterfaceEchotestHandleCallbackMethod3? = null,
        `onOther`: UniffiCallbackInterfaceEchotestHandleCallbackMethod4? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceEchotestHandleCallback(`onResult`,`onResultWithJsep`,`onEchoTestError`,`onHandleEvent`,`onOther`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceEchotestHandleCallback) {
        `onResult` = other.`onResult`
        `onResultWithJsep` = other.`onResultWithJsep`
        `onEchoTestError` = other.`onEchoTestError`
        `onHandleEvent` = other.`onHandleEvent`
        `onOther` = other.`onOther`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("onPluginEvent", "onHandleEvent", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceHandleCallback(
    @JvmField internal var `onPluginEvent`: UniffiCallbackInterfaceHandleCallbackMethod0? = null,
    @JvmField internal var `onHandleEvent`: UniffiCallbackInterfaceHandleCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onPluginEvent`: UniffiCallbackInterfaceHandleCallbackMethod0? = null,
        `onHandleEvent`: UniffiCallbackInterfaceHandleCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceHandleCallback(`onPluginEvent`,`onHandleEvent`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceHandleCallback) {
        `onPluginEvent` = other.`onPluginEvent`
        `onHandleEvent` = other.`onHandleEvent`
        `uniffiFree` = other.`uniffiFree`
    }

}






















































































































































































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_janus_gateway_checksum_func_init_janus_logger(
): Short
fun uniffi_janus_gateway_checksum_func_janus_connect(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_complete_trickle(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_configure(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_create_room(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_detach(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_exist(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_fire_and_forget(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_fire_and_forget_with_jsep(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_hangup(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_join_room(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_list_participants(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_mute(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_send_waiton_ack(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_send_waiton_result(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_start_event_loop(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_trickle_candidates(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_trickle_single_candidate(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandle_unmute(
): Short
fun uniffi_janus_gateway_checksum_method_connection_create_session(
): Short
fun uniffi_janus_gateway_checksum_method_connection_server_info(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_complete_trickle(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_detach(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_fire_and_forget(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_fire_and_forget_with_jsep(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_hangup(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_send_waiton_ack(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_send_waiton_result(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_start(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_start_event_loop(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_start_with_jsep(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_trickle_candidates(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandle_trickle_single_candidate(
): Short
fun uniffi_janus_gateway_checksum_method_handle_complete_trickle(
): Short
fun uniffi_janus_gateway_checksum_method_handle_detach(
): Short
fun uniffi_janus_gateway_checksum_method_handle_fire_and_forget(
): Short
fun uniffi_janus_gateway_checksum_method_handle_fire_and_forget_with_jsep(
): Short
fun uniffi_janus_gateway_checksum_method_handle_hangup(
): Short
fun uniffi_janus_gateway_checksum_method_handle_send_waiton_ack(
): Short
fun uniffi_janus_gateway_checksum_method_handle_send_waiton_result(
): Short
fun uniffi_janus_gateway_checksum_method_handle_start_event_loop(
): Short
fun uniffi_janus_gateway_checksum_method_handle_trickle_candidates(
): Short
fun uniffi_janus_gateway_checksum_method_handle_trickle_single_candidate(
): Short
fun uniffi_janus_gateway_checksum_method_session_attach(
): Short
fun uniffi_janus_gateway_checksum_method_session_attach_audio_bridge(
): Short
fun uniffi_janus_gateway_checksum_method_session_attach_echo_test(
): Short
fun uniffi_janus_gateway_checksum_method_session_destory(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_result(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_result_with_jsep(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_room_joined_with_jsep(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_room_joined(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_participants_joined(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_participants_updated(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_participant_left(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_handle_event(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_audio_bridge_error(
): Short
fun uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_other(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_result(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_result_with_jsep(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_echo_test_error(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_handle_event(
): Short
fun uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_other(
): Short
fun uniffi_janus_gateway_checksum_method_handlecallback_on_plugin_event(
): Short
fun uniffi_janus_gateway_checksum_method_handlecallback_on_handle_event(
): Short
fun ffi_janus_gateway_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "janus_gateway"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            uniffiCallbackInterfaceAudioBridgeHandleCallback.register(lib)
            uniffiCallbackInterfaceEchotestHandleCallback.register(lib)
            uniffiCallbackInterfaceHandleCallback.register(lib)
            // Loading of library with integrity check done.
            lib
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_janus_gateway_fn_clone_audiobridgehandle(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_janus_gateway_fn_free_audiobridgehandle(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_janus_gateway_fn_method_audiobridgehandle_complete_trickle(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_configure(`ptr`: Pointer,`params`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_create_room(`ptr`: Pointer,`params`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_detach(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_exist(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_fire_and_forget(`ptr`: Pointer,`data`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_fire_and_forget_with_jsep(`ptr`: Pointer,`data`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_hangup(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_join_room(`ptr`: Pointer,`params`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_list_participants(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_mute(`ptr`: Pointer,`params`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_send_waiton_ack(`ptr`: Pointer,`data`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_send_waiton_result(`ptr`: Pointer,`data`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_start_event_loop(`ptr`: Pointer,`cb`: Long,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_trickle_candidates(`ptr`: Pointer,`candidates`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_trickle_single_candidate(`ptr`: Pointer,`candidate`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_audiobridgehandle_unmute(`ptr`: Pointer,`params`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_clone_connection(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_janus_gateway_fn_free_connection(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_janus_gateway_fn_method_connection_create_session(`ptr`: Pointer,`keepAliveIntervalInSecs`: Int,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_connection_server_info(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_clone_echotesthandle(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_janus_gateway_fn_free_echotesthandle(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_janus_gateway_fn_method_echotesthandle_complete_trickle(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_detach(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_fire_and_forget(`ptr`: Pointer,`data`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_fire_and_forget_with_jsep(`ptr`: Pointer,`data`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_hangup(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_send_waiton_ack(`ptr`: Pointer,`data`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_send_waiton_result(`ptr`: Pointer,`data`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_start(`ptr`: Pointer,`params`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_start_event_loop(`ptr`: Pointer,`cb`: Long,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_start_with_jsep(`ptr`: Pointer,`params`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_trickle_candidates(`ptr`: Pointer,`candidates`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_echotesthandle_trickle_single_candidate(`ptr`: Pointer,`candidate`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_clone_handle(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_janus_gateway_fn_free_handle(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_janus_gateway_fn_method_handle_complete_trickle(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_detach(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_fire_and_forget(`ptr`: Pointer,`data`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_fire_and_forget_with_jsep(`ptr`: Pointer,`data`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_hangup(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_send_waiton_ack(`ptr`: Pointer,`data`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_send_waiton_result(`ptr`: Pointer,`data`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_start_event_loop(`ptr`: Pointer,`cb`: Long,
): Long
fun uniffi_janus_gateway_fn_method_handle_trickle_candidates(`ptr`: Pointer,`candidates`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_handle_trickle_single_candidate(`ptr`: Pointer,`candidate`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_clone_session(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_janus_gateway_fn_free_session(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_janus_gateway_fn_method_session_attach(`ptr`: Pointer,`pluginId`: RustBuffer.ByValue,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_session_attach_audio_bridge(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_session_attach_echo_test(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_method_session_destory(`ptr`: Pointer,`timeout`: RustBuffer.ByValue,
): Long
fun uniffi_janus_gateway_fn_init_callback_vtable_audiobridgehandlecallback(`vtable`: UniffiVTableCallbackInterfaceAudioBridgeHandleCallback,
): Unit
fun uniffi_janus_gateway_fn_init_callback_vtable_echotesthandlecallback(`vtable`: UniffiVTableCallbackInterfaceEchotestHandleCallback,
): Unit
fun uniffi_janus_gateway_fn_init_callback_vtable_handlecallback(`vtable`: UniffiVTableCallbackInterfaceHandleCallback,
): Unit
fun uniffi_janus_gateway_fn_func_init_janus_logger(`subsystem`: RustBuffer.ByValue,`category`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_janus_gateway_fn_func_janus_connect(`config`: RustBuffer.ByValue,
): Long
fun ffi_janus_gateway_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_janus_gateway_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_janus_gateway_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_janus_gateway_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_janus_gateway_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_janus_gateway_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_janus_gateway_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_janus_gateway_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_janus_gateway_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_janus_gateway_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_janus_gateway_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_janus_gateway_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_janus_gateway_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_janus_gateway_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_janus_gateway_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_janus_gateway_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_janus_gateway_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_janus_gateway_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_janus_gateway_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_janus_gateway_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_janus_gateway_checksum_func_init_janus_logger() != 56827.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_func_janus_connect() != 27438.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_complete_trickle() != 64327.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_configure() != 39928.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_create_room() != 56852.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_detach() != 50253.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_exist() != 55415.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_fire_and_forget() != 33585.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_fire_and_forget_with_jsep() != 6039.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_hangup() != 1409.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_join_room() != 62884.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_list_participants() != 7752.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_mute() != 55698.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_send_waiton_ack() != 44496.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_send_waiton_result() != 47125.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_start_event_loop() != 16772.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_trickle_candidates() != 5622.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_trickle_single_candidate() != 56691.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandle_unmute() != 10529.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_connection_create_session() != 38721.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_connection_server_info() != 18308.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_complete_trickle() != 25982.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_detach() != 23878.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_fire_and_forget() != 6820.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_fire_and_forget_with_jsep() != 31372.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_hangup() != 29523.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_send_waiton_ack() != 51386.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_send_waiton_result() != 15964.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_start() != 6138.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_start_event_loop() != 42772.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_start_with_jsep() != 58592.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_trickle_candidates() != 101.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandle_trickle_single_candidate() != 3746.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_complete_trickle() != 24960.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_detach() != 1157.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_fire_and_forget() != 43989.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_fire_and_forget_with_jsep() != 28005.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_hangup() != 23669.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_send_waiton_ack() != 1198.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_send_waiton_result() != 24292.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_start_event_loop() != 781.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_trickle_candidates() != 17041.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handle_trickle_single_candidate() != 48289.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_session_attach() != 16557.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_session_attach_audio_bridge() != 17158.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_session_attach_echo_test() != 28942.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_session_destory() != 62073.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_result() != 50231.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_result_with_jsep() != 23251.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_room_joined_with_jsep() != 60229.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_room_joined() != 39663.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_participants_joined() != 41973.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_participants_updated() != 13991.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_participant_left() != 5069.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_handle_event() != 6243.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_audio_bridge_error() != 45190.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_audiobridgehandlecallback_on_other() != 2276.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_result() != 12927.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_result_with_jsep() != 57945.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_echo_test_error() != 12056.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_handle_event() != 49029.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_echotesthandlecallback_on_other() != 50197.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handlecallback_on_plugin_event() != 21699.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_janus_gateway_checksum_method_handlecallback_on_handle_event() != 1626.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl: UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun<T, F, E: kotlin.Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4UL

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


/**
 * @suppress
 */
public object FfiConverterDuration: FfiConverterRustBuffer<java.time.Duration> {
    override fun read(buf: ByteBuffer): java.time.Duration {
        // Type mismatch (should be u64) but we check for overflow/underflow below
        val seconds = buf.getLong()
        // Type mismatch (should be u32) but we check for overflow/underflow below
        val nanoseconds = buf.getInt().toLong()
        if (seconds < 0) {
            throw java.time.DateTimeException("Duration exceeds minimum or maximum value supported by uniffi")
        }
        if (nanoseconds < 0) {
            throw java.time.DateTimeException("Duration nanoseconds exceed minimum or maximum supported by uniffi")
        }
        return java.time.Duration.ofSeconds(seconds, nanoseconds)
    }

    // 8 bytes for seconds, 4 bytes for nanoseconds
    override fun allocationSize(value: java.time.Duration) = 12UL

    override fun write(value: java.time.Duration, buf: ByteBuffer) {
        if (value.seconds < 0) {
            // Rust does not support negative Durations
            throw IllegalArgumentException("Invalid duration, must be non-negative")
        }

        if (value.nano < 0) {
            // Java docs provide guarantee that nano will always be positive, so this should be impossible
            // See: https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html
            throw IllegalArgumentException("Invalid duration, nano value must be non-negative")
        }

        // Type mismatch (should be u64) but since Rust doesn't support negative durations we should be OK
        buf.putLong(value.seconds)
        // Type mismatch (should be u32) but since values will always be between 0 and 999,999,999 it should be OK
        buf.putInt(value.nano)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.


private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
        AndroidSystemCleaner()
    } else {
        UniffiJnaCleaner()
    }

// The SystemCleaner, available from API Level 33.
// Some API Level 33 OSes do not support using it, so we require API Level 34.
@RequiresApi(Build.VERSION_CODES.UPSIDE_DOWN_CAKE)
private class AndroidSystemCleaner : UniffiCleaner {
    val cleaner = android.system.SystemCleaner.cleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        AndroidSystemCleanable(cleaner.register(value, cleanUpTask))
}

@RequiresApi(Build.VERSION_CODES.UPSIDE_DOWN_CAKE)
private class AndroidSystemCleanable(
    private val cleanable: java.lang.ref.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
public interface AudioBridgeHandleInterface {
    
    suspend fun `completeTrickle`(`timeout`: java.time.Duration)
    
    suspend fun `configure`(`params`: AudioBridgeConfigureParams, `jsep`: Jsep?, `timeout`: java.time.Duration): kotlin.String
    
    suspend fun `createRoom`(`params`: AudioBridgeCreateParams, `timeout`: java.time.Duration): AudioBridgeRoomCreatedRsp
    
    suspend fun `detach`(`timeout`: java.time.Duration)
    
    suspend fun `exist`(`roomId`: JanusId, `timeout`: java.time.Duration): kotlin.Boolean
    
    suspend fun `fireAndForget`(`data`: kotlin.ByteArray)
    
    suspend fun `fireAndForgetWithJsep`(`data`: kotlin.ByteArray, `jsep`: Jsep)
    
    suspend fun `hangup`(`timeout`: java.time.Duration)
    
    suspend fun `joinRoom`(`params`: AudioBridgeJoinParams, `jsep`: Jsep?, `timeout`: java.time.Duration): kotlin.String
    
    suspend fun `listParticipants`(`roomId`: JanusId, `timeout`: java.time.Duration): AudioBridgeListParticipantsRsp
    
    suspend fun `mute`(`params`: AudioBridgeMuteParams): kotlin.String
    
    suspend fun `sendWaitonAck`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration)
    
    suspend fun `sendWaitonResult`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration): kotlin.ByteArray
    
    suspend fun `startEventLoop`(`cb`: AudioBridgeHandleCallback)
    
    suspend fun `trickleCandidates`(`candidates`: List<Candidate>, `timeout`: java.time.Duration)
    
    suspend fun `trickleSingleCandidate`(`candidate`: Candidate, `timeout`: java.time.Duration)
    
    suspend fun `unmute`(`params`: AudioBridgeMuteParams): kotlin.String
    
    companion object
}

open class AudioBridgeHandle: Disposable, AutoCloseable, AudioBridgeHandleInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_janus_gateway_fn_free_audiobridgehandle(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_clone_audiobridgehandle(pointer!!, status)
        }
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `completeTrickle`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_complete_trickle(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `configure`(`params`: AudioBridgeConfigureParams, `jsep`: Jsep?, `timeout`: java.time.Duration) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_configure(
                thisPtr,
                FfiConverterTypeAudioBridgeConfigureParams.lower(`params`),FfiConverterOptionalTypeJsep.lower(`jsep`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `createRoom`(`params`: AudioBridgeCreateParams, `timeout`: java.time.Duration) : AudioBridgeRoomCreatedRsp {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_create_room(
                thisPtr,
                FfiConverterTypeAudioBridgeCreateParams.lower(`params`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeAudioBridgeRoomCreatedRsp.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `detach`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_detach(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `exist`(`roomId`: JanusId, `timeout`: java.time.Duration) : kotlin.Boolean {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_exist(
                thisPtr,
                FfiConverterTypeJanusId.lower(`roomId`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_i8(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_i8(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_i8(future) },
        // lift function
        { FfiConverterBoolean.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `fireAndForget`(`data`: kotlin.ByteArray) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_fire_and_forget(
                thisPtr,
                FfiConverterByteArray.lower(`data`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `fireAndForgetWithJsep`(`data`: kotlin.ByteArray, `jsep`: Jsep) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_fire_and_forget_with_jsep(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterTypeJsep.lower(`jsep`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `hangup`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_hangup(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `joinRoom`(`params`: AudioBridgeJoinParams, `jsep`: Jsep?, `timeout`: java.time.Duration) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_join_room(
                thisPtr,
                FfiConverterTypeAudioBridgeJoinParams.lower(`params`),FfiConverterOptionalTypeJsep.lower(`jsep`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `listParticipants`(`roomId`: JanusId, `timeout`: java.time.Duration) : AudioBridgeListParticipantsRsp {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_list_participants(
                thisPtr,
                FfiConverterTypeJanusId.lower(`roomId`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeAudioBridgeListParticipantsRsp.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `mute`(`params`: AudioBridgeMuteParams) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_mute(
                thisPtr,
                FfiConverterTypeAudioBridgeMuteParams.lower(`params`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendWaitonAck`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_send_waiton_ack(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendWaitonResult`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration) : kotlin.ByteArray {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_send_waiton_result(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterByteArray.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `startEventLoop`(`cb`: AudioBridgeHandleCallback) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_start_event_loop(
                thisPtr,
                FfiConverterTypeAudioBridgeHandleCallback.lower(`cb`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `trickleCandidates`(`candidates`: List<Candidate>, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_trickle_candidates(
                thisPtr,
                FfiConverterSequenceTypeCandidate.lower(`candidates`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `trickleSingleCandidate`(`candidate`: Candidate, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_trickle_single_candidate(
                thisPtr,
                FfiConverterTypeCandidate.lower(`candidate`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `unmute`(`params`: AudioBridgeMuteParams) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_audiobridgehandle_unmute(
                thisPtr,
                FfiConverterTypeAudioBridgeMuteParams.lower(`params`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeHandle: FfiConverter<AudioBridgeHandle, Pointer> {

    override fun lower(value: AudioBridgeHandle): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): AudioBridgeHandle {
        return AudioBridgeHandle(value)
    }

    override fun read(buf: ByteBuffer): AudioBridgeHandle {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AudioBridgeHandle) = 8UL

    override fun write(value: AudioBridgeHandle, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface ConnectionInterface {
    
    suspend fun `createSession`(`keepAliveIntervalInSecs`: kotlin.UInt, `timeout`: java.time.Duration): Session
    
    suspend fun `serverInfo`(`timeout`: java.time.Duration): ServerInfoRsp
    
    companion object
}

open class Connection: Disposable, AutoCloseable, ConnectionInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_janus_gateway_fn_free_connection(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_clone_connection(pointer!!, status)
        }
    }

    
    @Throws(JanusGatewaySessionException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `createSession`(`keepAliveIntervalInSecs`: kotlin.UInt, `timeout`: java.time.Duration) : Session {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_connection_create_session(
                thisPtr,
                FfiConverterUInt.lower(`keepAliveIntervalInSecs`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeSession.lift(it) },
        // Error FFI converter
        JanusGatewaySessionException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `serverInfo`(`timeout`: java.time.Duration) : ServerInfoRsp {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_connection_server_info(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeServerInfoRsp.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeConnection: FfiConverter<Connection, Pointer> {

    override fun lower(value: Connection): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Connection {
        return Connection(value)
    }

    override fun read(buf: ByteBuffer): Connection {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Connection) = 8UL

    override fun write(value: Connection, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface EchotestHandleInterface {
    
    suspend fun `completeTrickle`(`timeout`: java.time.Duration)
    
    suspend fun `detach`(`timeout`: java.time.Duration)
    
    suspend fun `fireAndForget`(`data`: kotlin.ByteArray)
    
    suspend fun `fireAndForgetWithJsep`(`data`: kotlin.ByteArray, `jsep`: Jsep)
    
    suspend fun `hangup`(`timeout`: java.time.Duration)
    
    suspend fun `sendWaitonAck`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration)
    
    suspend fun `sendWaitonResult`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration): kotlin.ByteArray
    
    suspend fun `start`(`params`: EchoTestStartParams)
    
    suspend fun `startEventLoop`(`cb`: EchotestHandleCallback)
    
    suspend fun `startWithJsep`(`params`: EchoTestStartParams, `jsep`: Jsep, `timeout`: java.time.Duration)
    
    suspend fun `trickleCandidates`(`candidates`: List<Candidate>, `timeout`: java.time.Duration)
    
    suspend fun `trickleSingleCandidate`(`candidate`: Candidate, `timeout`: java.time.Duration)
    
    companion object
}

open class EchotestHandle: Disposable, AutoCloseable, EchotestHandleInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_janus_gateway_fn_free_echotesthandle(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_clone_echotesthandle(pointer!!, status)
        }
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `completeTrickle`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_complete_trickle(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `detach`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_detach(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `fireAndForget`(`data`: kotlin.ByteArray) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_fire_and_forget(
                thisPtr,
                FfiConverterByteArray.lower(`data`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `fireAndForgetWithJsep`(`data`: kotlin.ByteArray, `jsep`: Jsep) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_fire_and_forget_with_jsep(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterTypeJsep.lower(`jsep`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `hangup`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_hangup(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendWaitonAck`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_send_waiton_ack(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendWaitonResult`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration) : kotlin.ByteArray {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_send_waiton_result(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterByteArray.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `start`(`params`: EchoTestStartParams) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_start(
                thisPtr,
                FfiConverterTypeEchoTestStartParams.lower(`params`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `startEventLoop`(`cb`: EchotestHandleCallback) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_start_event_loop(
                thisPtr,
                FfiConverterTypeEchotestHandleCallback.lower(`cb`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `startWithJsep`(`params`: EchoTestStartParams, `jsep`: Jsep, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_start_with_jsep(
                thisPtr,
                FfiConverterTypeEchoTestStartParams.lower(`params`),FfiConverterTypeJsep.lower(`jsep`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `trickleCandidates`(`candidates`: List<Candidate>, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_trickle_candidates(
                thisPtr,
                FfiConverterSequenceTypeCandidate.lower(`candidates`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `trickleSingleCandidate`(`candidate`: Candidate, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_echotesthandle_trickle_single_candidate(
                thisPtr,
                FfiConverterTypeCandidate.lower(`candidate`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeEchotestHandle: FfiConverter<EchotestHandle, Pointer> {

    override fun lower(value: EchotestHandle): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): EchotestHandle {
        return EchotestHandle(value)
    }

    override fun read(buf: ByteBuffer): EchotestHandle {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: EchotestHandle) = 8UL

    override fun write(value: EchotestHandle, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface HandleInterface {
    
    suspend fun `completeTrickle`(`timeout`: java.time.Duration)
    
    suspend fun `detach`(`timeout`: java.time.Duration)
    
    suspend fun `fireAndForget`(`data`: kotlin.ByteArray)
    
    suspend fun `fireAndForgetWithJsep`(`data`: kotlin.ByteArray, `jsep`: Jsep)
    
    suspend fun `hangup`(`timeout`: java.time.Duration)
    
    suspend fun `sendWaitonAck`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration)
    
    suspend fun `sendWaitonResult`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration): kotlin.ByteArray
    
    suspend fun `startEventLoop`(`cb`: HandleCallback)
    
    suspend fun `trickleCandidates`(`candidates`: List<Candidate>, `timeout`: java.time.Duration)
    
    suspend fun `trickleSingleCandidate`(`candidate`: Candidate, `timeout`: java.time.Duration)
    
    companion object
}

open class Handle: Disposable, AutoCloseable, HandleInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_janus_gateway_fn_free_handle(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_clone_handle(pointer!!, status)
        }
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `completeTrickle`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_complete_trickle(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `detach`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_detach(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `fireAndForget`(`data`: kotlin.ByteArray) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_fire_and_forget(
                thisPtr,
                FfiConverterByteArray.lower(`data`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `fireAndForgetWithJsep`(`data`: kotlin.ByteArray, `jsep`: Jsep) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_fire_and_forget_with_jsep(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterTypeJsep.lower(`jsep`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `hangup`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_hangup(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendWaitonAck`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_send_waiton_ack(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendWaitonResult`(`data`: kotlin.ByteArray, `timeout`: java.time.Duration) : kotlin.ByteArray {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_send_waiton_result(
                thisPtr,
                FfiConverterByteArray.lower(`data`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterByteArray.lift(it) },
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `startEventLoop`(`cb`: HandleCallback) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_start_event_loop(
                thisPtr,
                FfiConverterTypeHandleCallback.lower(`cb`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `trickleCandidates`(`candidates`: List<Candidate>, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_trickle_candidates(
                thisPtr,
                FfiConverterSequenceTypeCandidate.lower(`candidates`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `trickleSingleCandidate`(`candidate`: Candidate, `timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_handle_trickle_single_candidate(
                thisPtr,
                FfiConverterTypeCandidate.lower(`candidate`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeHandle: FfiConverter<Handle, Pointer> {

    override fun lower(value: Handle): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Handle {
        return Handle(value)
    }

    override fun read(buf: ByteBuffer): Handle {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Handle) = 8UL

    override fun write(value: Handle, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface SessionInterface {
    
    suspend fun `attach`(`pluginId`: kotlin.String, `timeout`: java.time.Duration): Handle
    
    suspend fun `attachAudioBridge`(`timeout`: java.time.Duration): AudioBridgeHandle
    
    suspend fun `attachEchoTest`(`timeout`: java.time.Duration): EchotestHandle
    
    suspend fun `destory`(`timeout`: java.time.Duration)
    
    companion object
}

open class Session: Disposable, AutoCloseable, SessionInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_janus_gateway_fn_free_session(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_clone_session(pointer!!, status)
        }
    }

    
    @Throws(JanusGatewayHandleException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `attach`(`pluginId`: kotlin.String, `timeout`: java.time.Duration) : Handle {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_session_attach(
                thisPtr,
                FfiConverterString.lower(`pluginId`),FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeHandle.lift(it) },
        // Error FFI converter
        JanusGatewayHandleException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayHandleException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `attachAudioBridge`(`timeout`: java.time.Duration) : AudioBridgeHandle {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_session_attach_audio_bridge(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeAudioBridgeHandle.lift(it) },
        // Error FFI converter
        JanusGatewayHandleException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayHandleException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `attachEchoTest`(`timeout`: java.time.Duration) : EchotestHandle {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_session_attach_echo_test(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeEchotestHandle.lift(it) },
        // Error FFI converter
        JanusGatewayHandleException.ErrorHandler,
    )
    }

    
    @Throws(JanusGatewayCommunicationException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `destory`(`timeout`: java.time.Duration) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_janus_gateway_fn_method_session_destory(
                thisPtr,
                FfiConverterDuration.lower(`timeout`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        JanusGatewayCommunicationException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeSession: FfiConverter<Session, Pointer> {

    override fun lower(value: Session): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Session {
        return Session(value)
    }

    override fun read(buf: ByteBuffer): Session {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Session) = 8UL

    override fun write(value: Session, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class AudioBridgeConfigureParams (
    val `muted`: kotlin.Boolean? = null, 
    val `display`: kotlin.String? = null, 
    val `bitrate`: kotlin.ULong? = null, 
    val `quality`: kotlin.UByte? = null, 
    val `expectedLoss`: kotlin.UByte? = null, 
    val `volume`: kotlin.ULong? = null, 
    val `spatialPosition`: kotlin.UByte? = null, 
    val `denoise`: kotlin.Boolean? = null, 
    val `record`: kotlin.Boolean? = null, 
    val `filename`: kotlin.String? = null, 
    val `group`: kotlin.String? = null
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeConfigureParams: FfiConverterRustBuffer<AudioBridgeConfigureParams> {
    override fun read(buf: ByteBuffer): AudioBridgeConfigureParams {
        return AudioBridgeConfigureParams(
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalUByte.read(buf),
            FfiConverterOptionalUByte.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalUByte.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeConfigureParams) = (
            FfiConverterOptionalBoolean.allocationSize(value.`muted`) +
            FfiConverterOptionalString.allocationSize(value.`display`) +
            FfiConverterOptionalULong.allocationSize(value.`bitrate`) +
            FfiConverterOptionalUByte.allocationSize(value.`quality`) +
            FfiConverterOptionalUByte.allocationSize(value.`expectedLoss`) +
            FfiConverterOptionalULong.allocationSize(value.`volume`) +
            FfiConverterOptionalUByte.allocationSize(value.`spatialPosition`) +
            FfiConverterOptionalBoolean.allocationSize(value.`denoise`) +
            FfiConverterOptionalBoolean.allocationSize(value.`record`) +
            FfiConverterOptionalString.allocationSize(value.`filename`) +
            FfiConverterOptionalString.allocationSize(value.`group`)
    )

    override fun write(value: AudioBridgeConfigureParams, buf: ByteBuffer) {
            FfiConverterOptionalBoolean.write(value.`muted`, buf)
            FfiConverterOptionalString.write(value.`display`, buf)
            FfiConverterOptionalULong.write(value.`bitrate`, buf)
            FfiConverterOptionalUByte.write(value.`quality`, buf)
            FfiConverterOptionalUByte.write(value.`expectedLoss`, buf)
            FfiConverterOptionalULong.write(value.`volume`, buf)
            FfiConverterOptionalUByte.write(value.`spatialPosition`, buf)
            FfiConverterOptionalBoolean.write(value.`denoise`, buf)
            FfiConverterOptionalBoolean.write(value.`record`, buf)
            FfiConverterOptionalString.write(value.`filename`, buf)
            FfiConverterOptionalString.write(value.`group`, buf)
    }
}



data class AudioBridgeCreateParams (
    val `room`: JanusId? = null, 
    val `permanent`: kotlin.Boolean? = null, 
    val `description`: kotlin.String? = null, 
    val `secret`: kotlin.String? = null, 
    val `pin`: kotlin.String? = null, 
    val `isPrivate`: kotlin.Boolean? = null, 
    val `allowed`: List<kotlin.String>? = null, 
    val `samplingRate`: kotlin.ULong? = null, 
    val `spatialAudio`: kotlin.Boolean? = null, 
    val `audiolevelExt`: kotlin.Boolean? = null, 
    val `audiolevelEvent`: kotlin.Boolean? = null, 
    val `audioActivePackets`: kotlin.ULong? = null, 
    val `defaultExpectedloss`: kotlin.ULong? = null, 
    val `defaultBitrate`: kotlin.ULong? = null, 
    val `record`: kotlin.Boolean? = null, 
    val `recordFile`: kotlin.String? = null, 
    val `recordDir`: kotlin.String? = null, 
    val `mjrs`: kotlin.Boolean? = null, 
    val `mjrsDir`: kotlin.String? = null, 
    val `allowRtpParticipants`: kotlin.Boolean? = null, 
    val `groups`: List<kotlin.String>? = null
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeCreateParams: FfiConverterRustBuffer<AudioBridgeCreateParams> {
    override fun read(buf: ByteBuffer): AudioBridgeCreateParams {
        return AudioBridgeCreateParams(
            FfiConverterOptionalTypeJanusId.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeCreateParams) = (
            FfiConverterOptionalTypeJanusId.allocationSize(value.`room`) +
            FfiConverterOptionalBoolean.allocationSize(value.`permanent`) +
            FfiConverterOptionalString.allocationSize(value.`description`) +
            FfiConverterOptionalString.allocationSize(value.`secret`) +
            FfiConverterOptionalString.allocationSize(value.`pin`) +
            FfiConverterOptionalBoolean.allocationSize(value.`isPrivate`) +
            FfiConverterOptionalSequenceString.allocationSize(value.`allowed`) +
            FfiConverterOptionalULong.allocationSize(value.`samplingRate`) +
            FfiConverterOptionalBoolean.allocationSize(value.`spatialAudio`) +
            FfiConverterOptionalBoolean.allocationSize(value.`audiolevelExt`) +
            FfiConverterOptionalBoolean.allocationSize(value.`audiolevelEvent`) +
            FfiConverterOptionalULong.allocationSize(value.`audioActivePackets`) +
            FfiConverterOptionalULong.allocationSize(value.`defaultExpectedloss`) +
            FfiConverterOptionalULong.allocationSize(value.`defaultBitrate`) +
            FfiConverterOptionalBoolean.allocationSize(value.`record`) +
            FfiConverterOptionalString.allocationSize(value.`recordFile`) +
            FfiConverterOptionalString.allocationSize(value.`recordDir`) +
            FfiConverterOptionalBoolean.allocationSize(value.`mjrs`) +
            FfiConverterOptionalString.allocationSize(value.`mjrsDir`) +
            FfiConverterOptionalBoolean.allocationSize(value.`allowRtpParticipants`) +
            FfiConverterOptionalSequenceString.allocationSize(value.`groups`)
    )

    override fun write(value: AudioBridgeCreateParams, buf: ByteBuffer) {
            FfiConverterOptionalTypeJanusId.write(value.`room`, buf)
            FfiConverterOptionalBoolean.write(value.`permanent`, buf)
            FfiConverterOptionalString.write(value.`description`, buf)
            FfiConverterOptionalString.write(value.`secret`, buf)
            FfiConverterOptionalString.write(value.`pin`, buf)
            FfiConverterOptionalBoolean.write(value.`isPrivate`, buf)
            FfiConverterOptionalSequenceString.write(value.`allowed`, buf)
            FfiConverterOptionalULong.write(value.`samplingRate`, buf)
            FfiConverterOptionalBoolean.write(value.`spatialAudio`, buf)
            FfiConverterOptionalBoolean.write(value.`audiolevelExt`, buf)
            FfiConverterOptionalBoolean.write(value.`audiolevelEvent`, buf)
            FfiConverterOptionalULong.write(value.`audioActivePackets`, buf)
            FfiConverterOptionalULong.write(value.`defaultExpectedloss`, buf)
            FfiConverterOptionalULong.write(value.`defaultBitrate`, buf)
            FfiConverterOptionalBoolean.write(value.`record`, buf)
            FfiConverterOptionalString.write(value.`recordFile`, buf)
            FfiConverterOptionalString.write(value.`recordDir`, buf)
            FfiConverterOptionalBoolean.write(value.`mjrs`, buf)
            FfiConverterOptionalString.write(value.`mjrsDir`, buf)
            FfiConverterOptionalBoolean.write(value.`allowRtpParticipants`, buf)
            FfiConverterOptionalSequenceString.write(value.`groups`, buf)
    }
}



data class AudioBridgeJoinParams (
    val `room`: JanusId, 
    val `optional`: AudioBridgeJoinParamsOptional
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeJoinParams: FfiConverterRustBuffer<AudioBridgeJoinParams> {
    override fun read(buf: ByteBuffer): AudioBridgeJoinParams {
        return AudioBridgeJoinParams(
            FfiConverterTypeJanusId.read(buf),
            FfiConverterTypeAudioBridgeJoinParamsOptional.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeJoinParams) = (
            FfiConverterTypeJanusId.allocationSize(value.`room`) +
            FfiConverterTypeAudioBridgeJoinParamsOptional.allocationSize(value.`optional`)
    )

    override fun write(value: AudioBridgeJoinParams, buf: ByteBuffer) {
            FfiConverterTypeJanusId.write(value.`room`, buf)
            FfiConverterTypeAudioBridgeJoinParamsOptional.write(value.`optional`, buf)
    }
}



data class AudioBridgeJoinParamsOptional (
    val `id`: JanusId? = null, 
    val `group`: kotlin.String? = null, 
    val `pin`: kotlin.String? = null, 
    val `display`: kotlin.String? = null, 
    val `token`: kotlin.String? = null, 
    val `muted`: kotlin.Boolean? = null, 
    val `suspended`: kotlin.Boolean? = null, 
    val `pauseEvents`: kotlin.Boolean? = null, 
    val `codec`: AudioBridgeCodec? = null, 
    val `bitrate`: kotlin.ULong? = null, 
    val `quality`: kotlin.UByte? = null, 
    val `expectedLoss`: kotlin.UByte? = null, 
    val `volume`: kotlin.ULong? = null, 
    val `spatialPosition`: kotlin.UByte? = null, 
    val `secret`: kotlin.String? = null, 
    val `audioLevelAverage`: kotlin.ULong? = null, 
    val `audioActivePackets`: kotlin.ULong? = null, 
    val `record`: kotlin.Boolean? = null, 
    val `filename`: kotlin.String? = null, 
    val `generateOffer`: kotlin.Boolean? = null, 
    val `rtp`: AudioBridgeRtp? = null
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeJoinParamsOptional: FfiConverterRustBuffer<AudioBridgeJoinParamsOptional> {
    override fun read(buf: ByteBuffer): AudioBridgeJoinParamsOptional {
        return AudioBridgeJoinParamsOptional(
            FfiConverterOptionalTypeJanusId.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalTypeAudioBridgeCodec.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalUByte.read(buf),
            FfiConverterOptionalUByte.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalUByte.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalTypeAudioBridgeRTP.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeJoinParamsOptional) = (
            FfiConverterOptionalTypeJanusId.allocationSize(value.`id`) +
            FfiConverterOptionalString.allocationSize(value.`group`) +
            FfiConverterOptionalString.allocationSize(value.`pin`) +
            FfiConverterOptionalString.allocationSize(value.`display`) +
            FfiConverterOptionalString.allocationSize(value.`token`) +
            FfiConverterOptionalBoolean.allocationSize(value.`muted`) +
            FfiConverterOptionalBoolean.allocationSize(value.`suspended`) +
            FfiConverterOptionalBoolean.allocationSize(value.`pauseEvents`) +
            FfiConverterOptionalTypeAudioBridgeCodec.allocationSize(value.`codec`) +
            FfiConverterOptionalULong.allocationSize(value.`bitrate`) +
            FfiConverterOptionalUByte.allocationSize(value.`quality`) +
            FfiConverterOptionalUByte.allocationSize(value.`expectedLoss`) +
            FfiConverterOptionalULong.allocationSize(value.`volume`) +
            FfiConverterOptionalUByte.allocationSize(value.`spatialPosition`) +
            FfiConverterOptionalString.allocationSize(value.`secret`) +
            FfiConverterOptionalULong.allocationSize(value.`audioLevelAverage`) +
            FfiConverterOptionalULong.allocationSize(value.`audioActivePackets`) +
            FfiConverterOptionalBoolean.allocationSize(value.`record`) +
            FfiConverterOptionalString.allocationSize(value.`filename`) +
            FfiConverterOptionalBoolean.allocationSize(value.`generateOffer`) +
            FfiConverterOptionalTypeAudioBridgeRTP.allocationSize(value.`rtp`)
    )

    override fun write(value: AudioBridgeJoinParamsOptional, buf: ByteBuffer) {
            FfiConverterOptionalTypeJanusId.write(value.`id`, buf)
            FfiConverterOptionalString.write(value.`group`, buf)
            FfiConverterOptionalString.write(value.`pin`, buf)
            FfiConverterOptionalString.write(value.`display`, buf)
            FfiConverterOptionalString.write(value.`token`, buf)
            FfiConverterOptionalBoolean.write(value.`muted`, buf)
            FfiConverterOptionalBoolean.write(value.`suspended`, buf)
            FfiConverterOptionalBoolean.write(value.`pauseEvents`, buf)
            FfiConverterOptionalTypeAudioBridgeCodec.write(value.`codec`, buf)
            FfiConverterOptionalULong.write(value.`bitrate`, buf)
            FfiConverterOptionalUByte.write(value.`quality`, buf)
            FfiConverterOptionalUByte.write(value.`expectedLoss`, buf)
            FfiConverterOptionalULong.write(value.`volume`, buf)
            FfiConverterOptionalUByte.write(value.`spatialPosition`, buf)
            FfiConverterOptionalString.write(value.`secret`, buf)
            FfiConverterOptionalULong.write(value.`audioLevelAverage`, buf)
            FfiConverterOptionalULong.write(value.`audioActivePackets`, buf)
            FfiConverterOptionalBoolean.write(value.`record`, buf)
            FfiConverterOptionalString.write(value.`filename`, buf)
            FfiConverterOptionalBoolean.write(value.`generateOffer`, buf)
            FfiConverterOptionalTypeAudioBridgeRTP.write(value.`rtp`, buf)
    }
}



data class AudioBridgeListParticipantsRsp (
    val `room`: JanusId, 
    val `participants`: List<AudioBridgeParticipant>
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeListParticipantsRsp: FfiConverterRustBuffer<AudioBridgeListParticipantsRsp> {
    override fun read(buf: ByteBuffer): AudioBridgeListParticipantsRsp {
        return AudioBridgeListParticipantsRsp(
            FfiConverterTypeJanusId.read(buf),
            FfiConverterSequenceTypeAudioBridgeParticipant.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeListParticipantsRsp) = (
            FfiConverterTypeJanusId.allocationSize(value.`room`) +
            FfiConverterSequenceTypeAudioBridgeParticipant.allocationSize(value.`participants`)
    )

    override fun write(value: AudioBridgeListParticipantsRsp, buf: ByteBuffer) {
            FfiConverterTypeJanusId.write(value.`room`, buf)
            FfiConverterSequenceTypeAudioBridgeParticipant.write(value.`participants`, buf)
    }
}



data class AudioBridgeMuteParams (
    val `id`: JanusId, 
    val `room`: JanusId, 
    val `secret`: kotlin.String? = null
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeMuteParams: FfiConverterRustBuffer<AudioBridgeMuteParams> {
    override fun read(buf: ByteBuffer): AudioBridgeMuteParams {
        return AudioBridgeMuteParams(
            FfiConverterTypeJanusId.read(buf),
            FfiConverterTypeJanusId.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeMuteParams) = (
            FfiConverterTypeJanusId.allocationSize(value.`id`) +
            FfiConverterTypeJanusId.allocationSize(value.`room`) +
            FfiConverterOptionalString.allocationSize(value.`secret`)
    )

    override fun write(value: AudioBridgeMuteParams, buf: ByteBuffer) {
            FfiConverterTypeJanusId.write(value.`id`, buf)
            FfiConverterTypeJanusId.write(value.`room`, buf)
            FfiConverterOptionalString.write(value.`secret`, buf)
    }
}



data class AudioBridgeParticipant (
    val `id`: JanusId, 
    val `display`: kotlin.String?, 
    val `setup`: kotlin.Boolean, 
    val `muted`: kotlin.Boolean, 
    val `suspended`: kotlin.Boolean?, 
    val `talking`: kotlin.Boolean?, 
    val `spatialPosition`: kotlin.ULong?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeParticipant: FfiConverterRustBuffer<AudioBridgeParticipant> {
    override fun read(buf: ByteBuffer): AudioBridgeParticipant {
        return AudioBridgeParticipant(
            FfiConverterTypeJanusId.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeParticipant) = (
            FfiConverterTypeJanusId.allocationSize(value.`id`) +
            FfiConverterOptionalString.allocationSize(value.`display`) +
            FfiConverterBoolean.allocationSize(value.`setup`) +
            FfiConverterBoolean.allocationSize(value.`muted`) +
            FfiConverterOptionalBoolean.allocationSize(value.`suspended`) +
            FfiConverterOptionalBoolean.allocationSize(value.`talking`) +
            FfiConverterOptionalULong.allocationSize(value.`spatialPosition`)
    )

    override fun write(value: AudioBridgeParticipant, buf: ByteBuffer) {
            FfiConverterTypeJanusId.write(value.`id`, buf)
            FfiConverterOptionalString.write(value.`display`, buf)
            FfiConverterBoolean.write(value.`setup`, buf)
            FfiConverterBoolean.write(value.`muted`, buf)
            FfiConverterOptionalBoolean.write(value.`suspended`, buf)
            FfiConverterOptionalBoolean.write(value.`talking`, buf)
            FfiConverterOptionalULong.write(value.`spatialPosition`, buf)
    }
}



data class AudioBridgeRtp (
    val `required`: AudioBridgeRtpRequired, 
    val `optional`: AudioBridgeRtpOptional
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeRTP: FfiConverterRustBuffer<AudioBridgeRtp> {
    override fun read(buf: ByteBuffer): AudioBridgeRtp {
        return AudioBridgeRtp(
            FfiConverterTypeAudioBridgeRTPRequired.read(buf),
            FfiConverterTypeAudioBridgeRTPOptional.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeRtp) = (
            FfiConverterTypeAudioBridgeRTPRequired.allocationSize(value.`required`) +
            FfiConverterTypeAudioBridgeRTPOptional.allocationSize(value.`optional`)
    )

    override fun write(value: AudioBridgeRtp, buf: ByteBuffer) {
            FfiConverterTypeAudioBridgeRTPRequired.write(value.`required`, buf)
            FfiConverterTypeAudioBridgeRTPOptional.write(value.`optional`, buf)
    }
}



data class AudioBridgeRtpOptional (
    val `payloadType`: kotlin.String? = null, 
    val `audiolevelExt`: kotlin.String? = null, 
    val `fec`: kotlin.Boolean? = null
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeRTPOptional: FfiConverterRustBuffer<AudioBridgeRtpOptional> {
    override fun read(buf: ByteBuffer): AudioBridgeRtpOptional {
        return AudioBridgeRtpOptional(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeRtpOptional) = (
            FfiConverterOptionalString.allocationSize(value.`payloadType`) +
            FfiConverterOptionalString.allocationSize(value.`audiolevelExt`) +
            FfiConverterOptionalBoolean.allocationSize(value.`fec`)
    )

    override fun write(value: AudioBridgeRtpOptional, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`payloadType`, buf)
            FfiConverterOptionalString.write(value.`audiolevelExt`, buf)
            FfiConverterOptionalBoolean.write(value.`fec`, buf)
    }
}



data class AudioBridgeRtpRequired (
    val `ip`: kotlin.String, 
    val `port`: kotlin.UShort
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeRTPRequired: FfiConverterRustBuffer<AudioBridgeRtpRequired> {
    override fun read(buf: ByteBuffer): AudioBridgeRtpRequired {
        return AudioBridgeRtpRequired(
            FfiConverterString.read(buf),
            FfiConverterUShort.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeRtpRequired) = (
            FfiConverterString.allocationSize(value.`ip`) +
            FfiConverterUShort.allocationSize(value.`port`)
    )

    override fun write(value: AudioBridgeRtpRequired, buf: ByteBuffer) {
            FfiConverterString.write(value.`ip`, buf)
            FfiConverterUShort.write(value.`port`, buf)
    }
}



data class AudioBridgeRoomCreatedRsp (
    val `room`: JanusId, 
    val `permanent`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeRoomCreatedRsp: FfiConverterRustBuffer<AudioBridgeRoomCreatedRsp> {
    override fun read(buf: ByteBuffer): AudioBridgeRoomCreatedRsp {
        return AudioBridgeRoomCreatedRsp(
            FfiConverterTypeJanusId.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: AudioBridgeRoomCreatedRsp) = (
            FfiConverterTypeJanusId.allocationSize(value.`room`) +
            FfiConverterBoolean.allocationSize(value.`permanent`)
    )

    override fun write(value: AudioBridgeRoomCreatedRsp, buf: ByteBuffer) {
            FfiConverterTypeJanusId.write(value.`room`, buf)
            FfiConverterBoolean.write(value.`permanent`, buf)
    }
}



data class Candidate (
    val `candidate`: kotlin.String, 
    val `sdpMid`: kotlin.String, 
    val `sdpMlineIndex`: kotlin.UInt
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeCandidate: FfiConverterRustBuffer<Candidate> {
    override fun read(buf: ByteBuffer): Candidate {
        return Candidate(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: Candidate) = (
            FfiConverterString.allocationSize(value.`candidate`) +
            FfiConverterString.allocationSize(value.`sdpMid`) +
            FfiConverterUInt.allocationSize(value.`sdpMlineIndex`)
    )

    override fun write(value: Candidate, buf: ByteBuffer) {
            FfiConverterString.write(value.`candidate`, buf)
            FfiConverterString.write(value.`sdpMid`, buf)
            FfiConverterUInt.write(value.`sdpMlineIndex`, buf)
    }
}



data class Config (
    /**
     * Server URL
     */
    val `url`: kotlin.String, 
    /**
     * Buffer capacity
     */
    val `capacity`: kotlin.UShort, 
    /**
     * API secret
     */
    val `apisecret`: kotlin.String? = null, 
    val `serverRoot`: kotlin.String = "janus"
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeConfig: FfiConverterRustBuffer<Config> {
    override fun read(buf: ByteBuffer): Config {
        return Config(
            FfiConverterString.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Config) = (
            FfiConverterString.allocationSize(value.`url`) +
            FfiConverterUShort.allocationSize(value.`capacity`) +
            FfiConverterOptionalString.allocationSize(value.`apisecret`) +
            FfiConverterString.allocationSize(value.`serverRoot`)
    )

    override fun write(value: Config, buf: ByteBuffer) {
            FfiConverterString.write(value.`url`, buf)
            FfiConverterUShort.write(value.`capacity`, buf)
            FfiConverterOptionalString.write(value.`apisecret`, buf)
            FfiConverterString.write(value.`serverRoot`, buf)
    }
}



data class EchoTestStartParams (
    val `audio`: kotlin.Boolean? = null, 
    val `video`: kotlin.Boolean? = null, 
    val `bitrate`: kotlin.UInt? = null, 
    val `record`: kotlin.Boolean? = null, 
    val `filename`: kotlin.String? = null, 
    val `substream`: kotlin.UInt? = null, 
    val `temporal`: kotlin.UInt? = null, 
    val `fallback`: kotlin.UInt? = null, 
    val `svc`: kotlin.Boolean? = null, 
    val `spatialLayer`: kotlin.UInt? = null, 
    val `temporalLayer`: kotlin.UInt? = null, 
    val `audiocodec`: kotlin.String? = null, 
    val `videocodec`: kotlin.String? = null, 
    val `videoprofile`: kotlin.String? = null, 
    val `opusred`: kotlin.Boolean? = null, 
    val `minDelay`: kotlin.Int? = null, 
    val `maxDelay`: kotlin.Int? = null
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEchoTestStartParams: FfiConverterRustBuffer<EchoTestStartParams> {
    override fun read(buf: ByteBuffer): EchoTestStartParams {
        return EchoTestStartParams(
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalInt.read(buf),
            FfiConverterOptionalInt.read(buf),
        )
    }

    override fun allocationSize(value: EchoTestStartParams) = (
            FfiConverterOptionalBoolean.allocationSize(value.`audio`) +
            FfiConverterOptionalBoolean.allocationSize(value.`video`) +
            FfiConverterOptionalUInt.allocationSize(value.`bitrate`) +
            FfiConverterOptionalBoolean.allocationSize(value.`record`) +
            FfiConverterOptionalString.allocationSize(value.`filename`) +
            FfiConverterOptionalUInt.allocationSize(value.`substream`) +
            FfiConverterOptionalUInt.allocationSize(value.`temporal`) +
            FfiConverterOptionalUInt.allocationSize(value.`fallback`) +
            FfiConverterOptionalBoolean.allocationSize(value.`svc`) +
            FfiConverterOptionalUInt.allocationSize(value.`spatialLayer`) +
            FfiConverterOptionalUInt.allocationSize(value.`temporalLayer`) +
            FfiConverterOptionalString.allocationSize(value.`audiocodec`) +
            FfiConverterOptionalString.allocationSize(value.`videocodec`) +
            FfiConverterOptionalString.allocationSize(value.`videoprofile`) +
            FfiConverterOptionalBoolean.allocationSize(value.`opusred`) +
            FfiConverterOptionalInt.allocationSize(value.`minDelay`) +
            FfiConverterOptionalInt.allocationSize(value.`maxDelay`)
    )

    override fun write(value: EchoTestStartParams, buf: ByteBuffer) {
            FfiConverterOptionalBoolean.write(value.`audio`, buf)
            FfiConverterOptionalBoolean.write(value.`video`, buf)
            FfiConverterOptionalUInt.write(value.`bitrate`, buf)
            FfiConverterOptionalBoolean.write(value.`record`, buf)
            FfiConverterOptionalString.write(value.`filename`, buf)
            FfiConverterOptionalUInt.write(value.`substream`, buf)
            FfiConverterOptionalUInt.write(value.`temporal`, buf)
            FfiConverterOptionalUInt.write(value.`fallback`, buf)
            FfiConverterOptionalBoolean.write(value.`svc`, buf)
            FfiConverterOptionalUInt.write(value.`spatialLayer`, buf)
            FfiConverterOptionalUInt.write(value.`temporalLayer`, buf)
            FfiConverterOptionalString.write(value.`audiocodec`, buf)
            FfiConverterOptionalString.write(value.`videocodec`, buf)
            FfiConverterOptionalString.write(value.`videoprofile`, buf)
            FfiConverterOptionalBoolean.write(value.`opusred`, buf)
            FfiConverterOptionalInt.write(value.`minDelay`, buf)
            FfiConverterOptionalInt.write(value.`maxDelay`, buf)
    }
}



data class Jsep (
    val `jsepType`: JsepType, 
    val `trickle`: kotlin.Boolean? = null, 
    val `sdp`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeJsep: FfiConverterRustBuffer<Jsep> {
    override fun read(buf: ByteBuffer): Jsep {
        return Jsep(
            FfiConverterTypeJsepType.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Jsep) = (
            FfiConverterTypeJsepType.allocationSize(value.`jsepType`) +
            FfiConverterOptionalBoolean.allocationSize(value.`trickle`) +
            FfiConverterString.allocationSize(value.`sdp`)
    )

    override fun write(value: Jsep, buf: ByteBuffer) {
            FfiConverterTypeJsepType.write(value.`jsepType`, buf)
            FfiConverterOptionalBoolean.write(value.`trickle`, buf)
            FfiConverterString.write(value.`sdp`, buf)
    }
}



data class MetaData (
    val `name`: kotlin.String, 
    val `author`: kotlin.String, 
    val `description`: kotlin.String, 
    val `versionString`: kotlin.String, 
    val `version`: kotlin.ULong
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMetaData: FfiConverterRustBuffer<MetaData> {
    override fun read(buf: ByteBuffer): MetaData {
        return MetaData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: MetaData) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`author`) +
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterString.allocationSize(value.`versionString`) +
            FfiConverterULong.allocationSize(value.`version`)
    )

    override fun write(value: MetaData, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`author`, buf)
            FfiConverterString.write(value.`description`, buf)
            FfiConverterString.write(value.`versionString`, buf)
            FfiConverterULong.write(value.`version`, buf)
    }
}



data class ServerInfoRsp (
    val `name`: kotlin.String, 
    val `version`: kotlin.ULong, 
    val `versionString`: kotlin.String, 
    val `author`: kotlin.String, 
    val `commitHash`: kotlin.String, 
    val `compileTime`: kotlin.String, 
    val `logToStdout`: kotlin.Boolean, 
    val `logToFile`: kotlin.Boolean, 
    val `dataChannels`: kotlin.Boolean, 
    val `acceptingNewSessions`: kotlin.Boolean, 
    val `sessionTimeout`: kotlin.ULong, 
    val `reclaimSessionTimeout`: kotlin.ULong, 
    val `candidatesTimeout`: kotlin.ULong, 
    val `serverName`: kotlin.String, 
    val `localIp`: kotlin.String, 
    val `ipv6`: kotlin.Boolean, 
    val `iceLite`: kotlin.Boolean, 
    val `iceTcp`: kotlin.Boolean, 
    val `iceNomination`: kotlin.String, 
    val `iceKeepaliveConncheck`: kotlin.Boolean, 
    val `fullTrickle`: kotlin.Boolean, 
    val `mdnsEnabled`: kotlin.Boolean, 
    val `minNackQueue`: kotlin.ULong, 
    val `twccPeriod`: kotlin.ULong, 
    val `dtlsMtu`: kotlin.ULong, 
    val `staticEventLoops`: kotlin.ULong, 
    val `apiSecret`: kotlin.Boolean, 
    val `authToken`: kotlin.Boolean, 
    val `eventHandlers`: kotlin.Boolean, 
    val `opaqueidInApi`: kotlin.Boolean, 
    val `dependencies`: Map<kotlin.String, kotlin.String>, 
    val `transports`: Map<kotlin.String, MetaData>, 
    val `plugins`: Map<kotlin.String, MetaData>
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeServerInfoRsp: FfiConverterRustBuffer<ServerInfoRsp> {
    override fun read(buf: ByteBuffer): ServerInfoRsp {
        return ServerInfoRsp(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterMapStringString.read(buf),
            FfiConverterMapStringTypeMetaData.read(buf),
            FfiConverterMapStringTypeMetaData.read(buf),
        )
    }

    override fun allocationSize(value: ServerInfoRsp) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterULong.allocationSize(value.`version`) +
            FfiConverterString.allocationSize(value.`versionString`) +
            FfiConverterString.allocationSize(value.`author`) +
            FfiConverterString.allocationSize(value.`commitHash`) +
            FfiConverterString.allocationSize(value.`compileTime`) +
            FfiConverterBoolean.allocationSize(value.`logToStdout`) +
            FfiConverterBoolean.allocationSize(value.`logToFile`) +
            FfiConverterBoolean.allocationSize(value.`dataChannels`) +
            FfiConverterBoolean.allocationSize(value.`acceptingNewSessions`) +
            FfiConverterULong.allocationSize(value.`sessionTimeout`) +
            FfiConverterULong.allocationSize(value.`reclaimSessionTimeout`) +
            FfiConverterULong.allocationSize(value.`candidatesTimeout`) +
            FfiConverterString.allocationSize(value.`serverName`) +
            FfiConverterString.allocationSize(value.`localIp`) +
            FfiConverterBoolean.allocationSize(value.`ipv6`) +
            FfiConverterBoolean.allocationSize(value.`iceLite`) +
            FfiConverterBoolean.allocationSize(value.`iceTcp`) +
            FfiConverterString.allocationSize(value.`iceNomination`) +
            FfiConverterBoolean.allocationSize(value.`iceKeepaliveConncheck`) +
            FfiConverterBoolean.allocationSize(value.`fullTrickle`) +
            FfiConverterBoolean.allocationSize(value.`mdnsEnabled`) +
            FfiConverterULong.allocationSize(value.`minNackQueue`) +
            FfiConverterULong.allocationSize(value.`twccPeriod`) +
            FfiConverterULong.allocationSize(value.`dtlsMtu`) +
            FfiConverterULong.allocationSize(value.`staticEventLoops`) +
            FfiConverterBoolean.allocationSize(value.`apiSecret`) +
            FfiConverterBoolean.allocationSize(value.`authToken`) +
            FfiConverterBoolean.allocationSize(value.`eventHandlers`) +
            FfiConverterBoolean.allocationSize(value.`opaqueidInApi`) +
            FfiConverterMapStringString.allocationSize(value.`dependencies`) +
            FfiConverterMapStringTypeMetaData.allocationSize(value.`transports`) +
            FfiConverterMapStringTypeMetaData.allocationSize(value.`plugins`)
    )

    override fun write(value: ServerInfoRsp, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterULong.write(value.`version`, buf)
            FfiConverterString.write(value.`versionString`, buf)
            FfiConverterString.write(value.`author`, buf)
            FfiConverterString.write(value.`commitHash`, buf)
            FfiConverterString.write(value.`compileTime`, buf)
            FfiConverterBoolean.write(value.`logToStdout`, buf)
            FfiConverterBoolean.write(value.`logToFile`, buf)
            FfiConverterBoolean.write(value.`dataChannels`, buf)
            FfiConverterBoolean.write(value.`acceptingNewSessions`, buf)
            FfiConverterULong.write(value.`sessionTimeout`, buf)
            FfiConverterULong.write(value.`reclaimSessionTimeout`, buf)
            FfiConverterULong.write(value.`candidatesTimeout`, buf)
            FfiConverterString.write(value.`serverName`, buf)
            FfiConverterString.write(value.`localIp`, buf)
            FfiConverterBoolean.write(value.`ipv6`, buf)
            FfiConverterBoolean.write(value.`iceLite`, buf)
            FfiConverterBoolean.write(value.`iceTcp`, buf)
            FfiConverterString.write(value.`iceNomination`, buf)
            FfiConverterBoolean.write(value.`iceKeepaliveConncheck`, buf)
            FfiConverterBoolean.write(value.`fullTrickle`, buf)
            FfiConverterBoolean.write(value.`mdnsEnabled`, buf)
            FfiConverterULong.write(value.`minNackQueue`, buf)
            FfiConverterULong.write(value.`twccPeriod`, buf)
            FfiConverterULong.write(value.`dtlsMtu`, buf)
            FfiConverterULong.write(value.`staticEventLoops`, buf)
            FfiConverterBoolean.write(value.`apiSecret`, buf)
            FfiConverterBoolean.write(value.`authToken`, buf)
            FfiConverterBoolean.write(value.`eventHandlers`, buf)
            FfiConverterBoolean.write(value.`opaqueidInApi`, buf)
            FfiConverterMapStringString.write(value.`dependencies`, buf)
            FfiConverterMapStringTypeMetaData.write(value.`transports`, buf)
            FfiConverterMapStringTypeMetaData.write(value.`plugins`, buf)
    }
}



data class U63 (
    val `inner`: kotlin.ULong
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeU63: FfiConverterRustBuffer<U63> {
    override fun read(buf: ByteBuffer): U63 {
        return U63(
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: U63) = (
            FfiConverterULong.allocationSize(value.`inner`)
    )

    override fun write(value: U63, buf: ByteBuffer) {
            FfiConverterULong.write(value.`inner`, buf)
    }
}




enum class AudioBridgeCodec {
    
    OPUS,
    /**
     * A-Law
     */
    PCMA,
    /**
     * mu-Law
     */
    PCMU;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeAudioBridgeCodec: FfiConverterRustBuffer<AudioBridgeCodec> {
    override fun read(buf: ByteBuffer) = try {
        AudioBridgeCodec.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AudioBridgeCodec) = 4UL

    override fun write(value: AudioBridgeCodec, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class GenericEvent {
    
    DETACHED,
    /**
     * The PeerConnection was closed, either by Janus or by the user/application, and as such cannot be used anymore.
     */
    HANGUP,
    /**
     * Whether Janus is receiving (receiving: true/false) audio/video (type: "audio/video") on this PeerConnection.
     */
    MEDIA,
    TIMEOUT,
    /**
     * ICE and DTLS succeeded, and so Janus correctly established a PeerConnection with the user/application.
     */
    WEBRTC_UP,
    /**
     * Whether Janus is reporting trouble sending/receiving (uplink: true/false) media on this PeerConnection.
     */
    SLOWLINK,
    TRICKLE;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeGenericEvent: FfiConverterRustBuffer<GenericEvent> {
    override fun read(buf: ByteBuffer) = try {
        GenericEvent.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: GenericEvent) = 4UL

    override fun write(value: GenericEvent, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class JanusGatewayCommunicationException: kotlin.Exception() {
    
    class Serialize(
        
        val `body`: kotlin.String
        ) : JanusGatewayCommunicationException() {
        override val message
            get() = "body=${ `body` }"
    }
    
    class SendFailure(
        
        val `reason`: kotlin.String
        ) : JanusGatewayCommunicationException() {
        override val message
            get() = "reason=${ `reason` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<JanusGatewayCommunicationException> {
        override fun lift(error_buf: RustBuffer.ByValue): JanusGatewayCommunicationException = FfiConverterTypeJanusGatewayCommunicationError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeJanusGatewayCommunicationError : FfiConverterRustBuffer<JanusGatewayCommunicationException> {
    override fun read(buf: ByteBuffer): JanusGatewayCommunicationException {
        

        return when(buf.getInt()) {
            1 -> JanusGatewayCommunicationException.Serialize(
                FfiConverterString.read(buf),
                )
            2 -> JanusGatewayCommunicationException.SendFailure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: JanusGatewayCommunicationException): ULong {
        return when(value) {
            is JanusGatewayCommunicationException.Serialize -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`body`)
            )
            is JanusGatewayCommunicationException.SendFailure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`reason`)
            )
        }
    }

    override fun write(value: JanusGatewayCommunicationException, buf: ByteBuffer) {
        when(value) {
            is JanusGatewayCommunicationException.Serialize -> {
                buf.putInt(1)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
            is JanusGatewayCommunicationException.SendFailure -> {
                buf.putInt(2)
                FfiConverterString.write(value.`reason`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class JanusGatewayConnectionException: kotlin.Exception() {
    
    class ConnectionFailure(
        
        val `reason`: kotlin.String
        ) : JanusGatewayConnectionException() {
        override val message
            get() = "reason=${ `reason` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<JanusGatewayConnectionException> {
        override fun lift(error_buf: RustBuffer.ByValue): JanusGatewayConnectionException = FfiConverterTypeJanusGatewayConnectionError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeJanusGatewayConnectionError : FfiConverterRustBuffer<JanusGatewayConnectionException> {
    override fun read(buf: ByteBuffer): JanusGatewayConnectionException {
        

        return when(buf.getInt()) {
            1 -> JanusGatewayConnectionException.ConnectionFailure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: JanusGatewayConnectionException): ULong {
        return when(value) {
            is JanusGatewayConnectionException.ConnectionFailure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`reason`)
            )
        }
    }

    override fun write(value: JanusGatewayConnectionException, buf: ByteBuffer) {
        when(value) {
            is JanusGatewayConnectionException.ConnectionFailure -> {
                buf.putInt(1)
                FfiConverterString.write(value.`reason`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class JanusGatewayHandleException: kotlin.Exception() {
    
    class HandleCreationFailure(
        
        val `plugin`: kotlin.String, 
        
        val `reason`: kotlin.String
        ) : JanusGatewayHandleException() {
        override val message
            get() = "plugin=${ `plugin` }, reason=${ `reason` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<JanusGatewayHandleException> {
        override fun lift(error_buf: RustBuffer.ByValue): JanusGatewayHandleException = FfiConverterTypeJanusGatewayHandleError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeJanusGatewayHandleError : FfiConverterRustBuffer<JanusGatewayHandleException> {
    override fun read(buf: ByteBuffer): JanusGatewayHandleException {
        

        return when(buf.getInt()) {
            1 -> JanusGatewayHandleException.HandleCreationFailure(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: JanusGatewayHandleException): ULong {
        return when(value) {
            is JanusGatewayHandleException.HandleCreationFailure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`plugin`)
                + FfiConverterString.allocationSize(value.`reason`)
            )
        }
    }

    override fun write(value: JanusGatewayHandleException, buf: ByteBuffer) {
        when(value) {
            is JanusGatewayHandleException.HandleCreationFailure -> {
                buf.putInt(1)
                FfiConverterString.write(value.`plugin`, buf)
                FfiConverterString.write(value.`reason`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class JanusGatewaySessionException: kotlin.Exception() {
    
    class SessionCreationFailure(
        
        val `reason`: kotlin.String
        ) : JanusGatewaySessionException() {
        override val message
            get() = "reason=${ `reason` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<JanusGatewaySessionException> {
        override fun lift(error_buf: RustBuffer.ByValue): JanusGatewaySessionException = FfiConverterTypeJanusGatewaySessionError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeJanusGatewaySessionError : FfiConverterRustBuffer<JanusGatewaySessionException> {
    override fun read(buf: ByteBuffer): JanusGatewaySessionException {
        

        return when(buf.getInt()) {
            1 -> JanusGatewaySessionException.SessionCreationFailure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: JanusGatewaySessionException): ULong {
        return when(value) {
            is JanusGatewaySessionException.SessionCreationFailure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`reason`)
            )
        }
    }

    override fun write(value: JanusGatewaySessionException, buf: ByteBuffer) {
        when(value) {
            is JanusGatewaySessionException.SessionCreationFailure -> {
                buf.putInt(1)
                FfiConverterString.write(value.`reason`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



sealed class JanusId {
    
    data class String(
        val v1: kotlin.String) : JanusId() {
        companion object
    }
    
    data class Uint(
        val v1: U63) : JanusId() {
        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeJanusId : FfiConverterRustBuffer<JanusId>{
    override fun read(buf: ByteBuffer): JanusId {
        return when(buf.getInt()) {
            1 -> JanusId.String(
                FfiConverterString.read(buf),
                )
            2 -> JanusId.Uint(
                FfiConverterTypeU63.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: JanusId) = when(value) {
        is JanusId.String -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
        }
        is JanusId.Uint -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeU63.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: JanusId, buf: ByteBuffer) {
        when(value) {
            is JanusId.String -> {
                buf.putInt(1)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is JanusId.Uint -> {
                buf.putInt(2)
                FfiConverterTypeU63.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class JsepType {
    
    OFFER,
    ANSWER;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeJsepType: FfiConverterRustBuffer<JsepType> {
    override fun read(buf: ByteBuffer) = try {
        JsepType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: JsepType) = 4UL

    override fun write(value: JsepType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







public interface AudioBridgeHandleCallback {
    
    fun `onResult`(`transaction`: kotlin.String, `result`: kotlin.String)
    
    fun `onResultWithJsep`(`transaction`: kotlin.String, `result`: kotlin.String, `jsep`: Jsep)
    
    fun `onRoomJoinedWithJsep`(`id`: JanusId, `room`: JanusId, `participants`: List<AudioBridgeParticipant>, `jsep`: Jsep)
    
    fun `onRoomJoined`(`id`: JanusId, `room`: JanusId, `participants`: List<AudioBridgeParticipant>)
    
    fun `onParticipantsJoined`(`room`: JanusId, `participants`: List<AudioBridgeParticipant>)
    
    fun `onParticipantsUpdated`(`room`: JanusId, `participants`: List<AudioBridgeParticipant>)
    
    fun `onParticipantLeft`(`room`: JanusId, `participantId`: JanusId)
    
    fun `onHandleEvent`(`event`: GenericEvent)
    
    fun `onAudioBridgeError`(`errorCode`: kotlin.UShort, `error`: kotlin.String)
    
    fun `onOther`(`data`: kotlin.ByteArray)
    
    companion object
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceAudioBridgeHandleCallback {
    internal object `onResult`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`transaction`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onResult`(
                    FfiConverterString.lift(`transaction`),
                    FfiConverterString.lift(`result`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onResultWithJsep`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`transaction`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onResultWithJsep`(
                    FfiConverterString.lift(`transaction`),
                    FfiConverterString.lift(`result`),
                    FfiConverterTypeJsep.lift(`jsep`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onRoomJoinedWithJsep`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod2 {
        override fun callback(`uniffiHandle`: Long,`id`: RustBuffer.ByValue,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onRoomJoinedWithJsep`(
                    FfiConverterTypeJanusId.lift(`id`),
                    FfiConverterTypeJanusId.lift(`room`),
                    FfiConverterSequenceTypeAudioBridgeParticipant.lift(`participants`),
                    FfiConverterTypeJsep.lift(`jsep`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onRoomJoined`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod3 {
        override fun callback(`uniffiHandle`: Long,`id`: RustBuffer.ByValue,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onRoomJoined`(
                    FfiConverterTypeJanusId.lift(`id`),
                    FfiConverterTypeJanusId.lift(`room`),
                    FfiConverterSequenceTypeAudioBridgeParticipant.lift(`participants`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onParticipantsJoined`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod4 {
        override fun callback(`uniffiHandle`: Long,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onParticipantsJoined`(
                    FfiConverterTypeJanusId.lift(`room`),
                    FfiConverterSequenceTypeAudioBridgeParticipant.lift(`participants`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onParticipantsUpdated`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod5 {
        override fun callback(`uniffiHandle`: Long,`room`: RustBuffer.ByValue,`participants`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onParticipantsUpdated`(
                    FfiConverterTypeJanusId.lift(`room`),
                    FfiConverterSequenceTypeAudioBridgeParticipant.lift(`participants`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onParticipantLeft`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod6 {
        override fun callback(`uniffiHandle`: Long,`room`: RustBuffer.ByValue,`participantId`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onParticipantLeft`(
                    FfiConverterTypeJanusId.lift(`room`),
                    FfiConverterTypeJanusId.lift(`participantId`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onHandleEvent`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod7 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onHandleEvent`(
                    FfiConverterTypeGenericEvent.lift(`event`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onAudioBridgeError`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod8 {
        override fun callback(`uniffiHandle`: Long,`errorCode`: Short,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onAudioBridgeError`(
                    FfiConverterUShort.lift(`errorCode`),
                    FfiConverterString.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onOther`: UniffiCallbackInterfaceAudioBridgeHandleCallbackMethod9 {
        override fun callback(`uniffiHandle`: Long,`data`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAudioBridgeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onOther`(
                    FfiConverterByteArray.lift(`data`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeAudioBridgeHandleCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceAudioBridgeHandleCallback.UniffiByValue(
        `onResult`,
        `onResultWithJsep`,
        `onRoomJoinedWithJsep`,
        `onRoomJoined`,
        `onParticipantsJoined`,
        `onParticipantsUpdated`,
        `onParticipantLeft`,
        `onHandleEvent`,
        `onAudioBridgeError`,
        `onOther`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_janus_gateway_fn_init_callback_vtable_audiobridgehandlecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeAudioBridgeHandleCallback: FfiConverterCallbackInterface<AudioBridgeHandleCallback>()





public interface EchotestHandleCallback {
    
    fun `onResult`(`echotest`: kotlin.String, `result`: kotlin.String)
    
    fun `onResultWithJsep`(`echotest`: kotlin.String, `result`: kotlin.String, `jsep`: Jsep)
    
    fun `onEchoTestError`(`errorCode`: kotlin.UShort, `error`: kotlin.String)
    
    fun `onHandleEvent`(`event`: GenericEvent)
    
    fun `onOther`(`data`: kotlin.ByteArray)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceEchotestHandleCallback {
    internal object `onResult`: UniffiCallbackInterfaceEchotestHandleCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`echotest`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEchotestHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onResult`(
                    FfiConverterString.lift(`echotest`),
                    FfiConverterString.lift(`result`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onResultWithJsep`: UniffiCallbackInterfaceEchotestHandleCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`echotest`: RustBuffer.ByValue,`result`: RustBuffer.ByValue,`jsep`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEchotestHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onResultWithJsep`(
                    FfiConverterString.lift(`echotest`),
                    FfiConverterString.lift(`result`),
                    FfiConverterTypeJsep.lift(`jsep`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onEchoTestError`: UniffiCallbackInterfaceEchotestHandleCallbackMethod2 {
        override fun callback(`uniffiHandle`: Long,`errorCode`: Short,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEchotestHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onEchoTestError`(
                    FfiConverterUShort.lift(`errorCode`),
                    FfiConverterString.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onHandleEvent`: UniffiCallbackInterfaceEchotestHandleCallbackMethod3 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEchotestHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onHandleEvent`(
                    FfiConverterTypeGenericEvent.lift(`event`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onOther`: UniffiCallbackInterfaceEchotestHandleCallbackMethod4 {
        override fun callback(`uniffiHandle`: Long,`data`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEchotestHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onOther`(
                    FfiConverterByteArray.lift(`data`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeEchotestHandleCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceEchotestHandleCallback.UniffiByValue(
        `onResult`,
        `onResultWithJsep`,
        `onEchoTestError`,
        `onHandleEvent`,
        `onOther`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_janus_gateway_fn_init_callback_vtable_echotesthandlecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeEchotestHandleCallback: FfiConverterCallbackInterface<EchotestHandleCallback>()





public interface HandleCallback {
    
    fun `onPluginEvent`(`event`: kotlin.ByteArray)
    
    fun `onHandleEvent`(`event`: GenericEvent)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceHandleCallback {
    internal object `onPluginEvent`: UniffiCallbackInterfaceHandleCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onPluginEvent`(
                    FfiConverterByteArray.lift(`event`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onHandleEvent`: UniffiCallbackInterfaceHandleCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeHandleCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onHandleEvent`(
                    FfiConverterTypeGenericEvent.lift(`event`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeHandleCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceHandleCallback.UniffiByValue(
        `onPluginEvent`,
        `onHandleEvent`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_janus_gateway_fn_init_callback_vtable_handlecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeHandleCallback: FfiConverterCallbackInterface<HandleCallback>()




/**
 * @suppress
 */
public object FfiConverterOptionalUByte: FfiConverterRustBuffer<kotlin.UByte?> {
    override fun read(buf: ByteBuffer): kotlin.UByte? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUByte.read(buf)
    }

    override fun allocationSize(value: kotlin.UByte?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUByte.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UByte?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUByte.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalUInt: FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalInt: FfiConverterRustBuffer<kotlin.Int?> {
    override fun read(buf: ByteBuffer): kotlin.Int? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterInt.read(buf)
    }

    override fun allocationSize(value: kotlin.Int?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterInt.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Int?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterInt.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalULong: FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalBoolean: FfiConverterRustBuffer<kotlin.Boolean?> {
    override fun read(buf: ByteBuffer): kotlin.Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: kotlin.Boolean?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeAudioBridgeRTP: FfiConverterRustBuffer<AudioBridgeRtp?> {
    override fun read(buf: ByteBuffer): AudioBridgeRtp? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAudioBridgeRTP.read(buf)
    }

    override fun allocationSize(value: AudioBridgeRtp?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAudioBridgeRTP.allocationSize(value)
        }
    }

    override fun write(value: AudioBridgeRtp?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAudioBridgeRTP.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeJsep: FfiConverterRustBuffer<Jsep?> {
    override fun read(buf: ByteBuffer): Jsep? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeJsep.read(buf)
    }

    override fun allocationSize(value: Jsep?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeJsep.allocationSize(value)
        }
    }

    override fun write(value: Jsep?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeJsep.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeAudioBridgeCodec: FfiConverterRustBuffer<AudioBridgeCodec?> {
    override fun read(buf: ByteBuffer): AudioBridgeCodec? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAudioBridgeCodec.read(buf)
    }

    override fun allocationSize(value: AudioBridgeCodec?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAudioBridgeCodec.allocationSize(value)
        }
    }

    override fun write(value: AudioBridgeCodec?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAudioBridgeCodec.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeJanusId: FfiConverterRustBuffer<JanusId?> {
    override fun read(buf: ByteBuffer): JanusId? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeJanusId.read(buf)
    }

    override fun allocationSize(value: JanusId?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeJanusId.allocationSize(value)
        }
    }

    override fun write(value: JanusId?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeJanusId.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<kotlin.String>?> {
    override fun read(buf: ByteBuffer): List<kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeAudioBridgeParticipant: FfiConverterRustBuffer<List<AudioBridgeParticipant>> {
    override fun read(buf: ByteBuffer): List<AudioBridgeParticipant> {
        val len = buf.getInt()
        return List<AudioBridgeParticipant>(len) {
            FfiConverterTypeAudioBridgeParticipant.read(buf)
        }
    }

    override fun allocationSize(value: List<AudioBridgeParticipant>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAudioBridgeParticipant.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<AudioBridgeParticipant>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAudioBridgeParticipant.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeCandidate: FfiConverterRustBuffer<List<Candidate>> {
    override fun read(buf: ByteBuffer): List<Candidate> {
        val len = buf.getInt()
        return List<Candidate>(len) {
            FfiConverterTypeCandidate.read(buf)
        }
    }

    override fun allocationSize(value: List<Candidate>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeCandidate.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Candidate>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeCandidate.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterMapStringTypeMetaData: FfiConverterRustBuffer<Map<kotlin.String, MetaData>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, MetaData> {
        val len = buf.getInt()
        return buildMap<kotlin.String, MetaData>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterTypeMetaData.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, MetaData>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypeMetaData.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, MetaData>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeMetaData.write(v, buf)
        }
    }
}







 fun `initJanusLogger`(`subsystem`: kotlin.String, `category`: kotlin.String)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_janus_gateway_fn_func_init_janus_logger(
        FfiConverterString.lower(`subsystem`),FfiConverterString.lower(`category`),_status)
}
    
    

    @Throws(JanusGatewayConnectionException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `janusConnect`(`config`: Config) : Connection {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_janus_gateway_fn_func_janus_connect(FfiConverterTypeConfig.lower(`config`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_janus_gateway_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeConnection.lift(it) },
        // Error FFI converter
        JanusGatewayConnectionException.ErrorHandler,
    )
    }


